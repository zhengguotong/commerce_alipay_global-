<?php
/**
 * @file
 * @author Guotong Zheng (Tony)
 * @website http://zhengguotong.me
 * Implements Alipay global payment services for use with Drupal Commerce
 */

/**
 * Implements hook_menu().
 */
function commerce_alipay_global_menu() {
    // Add a menu callback for Alipay's notification on operation processing.
    $items['commerce_alipay_global/notify'] = array(
        'page callback' => 'commerce_alipay_global_process_notify',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_alipay_global_commerce_payment_method_info() {
    $payment_methods = array();

    // Declare Alipay payment method to redirect to external site.
    $payment_methods['alipay_global'] = array(
        'base' => 'commerce_alipay_global',
        'title' => t('Alipay Global'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_alipay_global_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
            'service' => 'create_forex_trade',
            'partner' => '',
            'key' => '',
            'debug' => '',
        );
    // Declare form settings to configure the Alipay payment method.
    $form['service'] = array(
        '#type' => 'select',
        '#title' => t('Payment service type'),
        '#prefix' => t("Configure Alipay payment settings below with the corresponding account information.<br/>If you do not already have an account feel free to create a new merchant account at <a href='@link_alipayreg'>Alipay's Enterprise account registration</a> page.<br/>More help could be found on the official website at: <a href='@link_alipayhelp'>How to create a new enterprise account on Alipay's website</a> <em>(Chinese version)</em>.", array('@link_alipayreg' => 'https://memberprod.alipay.com/account/reg/enterpriseIndex.htm', '@link_alipayhelp' => 'http://help.alipay.com/lab/help_detail.htm?help_id=211702')),
        '#description' => t('Select the type of service provided by Alipay to process payments.<br/><strong>Currently only Instant Payment is fully supported.</strong>'),
        '#default_value' => $settings['service'],
        '#options' => array(
            'create_forex_trade' => t('Cross-border Website Payment'),
            'create_forex_trade_wap' => t('Cross-border Mobile Payment'),
        ),
        '#required' => TRUE,
    );

    // Partner ID should be long string.
    $form['partner'] = array(
        '#type' => 'textfield',
        '#title' => t('Partner ID'),
        '#description' => t("The Partner ID of the Alipay account on which payments should be credited."),
        '#default_value' => $settings['partner'],
        '#required' => TRUE,
    );
    // Alipay Key should be long string.
    $form['key'] = array(
        '#type' => 'textfield',
        '#title' => t('Key'),
        '#description' => t("The Key code provided by Alipay's API for the corresponding account and type of service."),
        '#default_value' => $settings['key'],
        '#required' => TRUE,
    );

    // Alipay Key should be long string.
    $form['currency'] = array(
        '#type' => 'select',
        '#title' => t('Select a target  foreign currency'),
        '#description' => t("Alipay will  remit the sum in selected foreign currency to the international merchant in settlement."),
        '#default_value' => $settings['currency'],
        '#options' => array(
            'GBP' => t('British Sterling'),
            'HKD' => t('Hong Kong Dollar'),
            'USD' => t('U.S. Dollar'),
            'SGD' => t('Singapore Dollar'),
            'JPY' => t('Japanese Yen'),
            'CAD' => t('Canada Dollar'),
            'AUD' => t('Australian Dollar'),
            'EUR' => t('Euro'),
            'NZD' => t('New Zealand Dollar'),
            'RUB' => t('Russian Rouble')
        ),
        '#required' => TRUE,
    );
    // Enable debug mode.
    $form['debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
        '#description' => t('<strong>Override all transactions to a total of 0.01 CNY</strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
        '#default_value' => $settings['debug'],
    );

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add Alipay icons.
 */
function commerce_alipay_global_form_commerce_checkout_form_alter(&$form, &$form_state)
{
    // If this checkout form contains the payment method radios...
    if (!empty($form['commerce_payment']['payment_method']['#options'])) {
        // Loop over its options array looking for a Alipay option.
        foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
            list($method_id, $rule_name) = explode('|', $key);

            // If we find Alipay...
            if ($method_id == 'alipay_global') {
                // Prepare the replacement radio button text with icons.
                $icons_path = drupal_get_path('module', 'commerce_alipay_global') . '/images/';

                // Generate Alipay logo image markup.
                $alipay_label = t('Alipay');
                $alipay_icon = theme('image', array(
                    'path' => $icons_path . 'alipay.jpg',
                    'title' => $alipay_label,
                    'alt' => $alipay_label,
                    'attributes' => array('class' => 'commerce-alipay-icon'),
                ));

                // Generate the aggregated markup.
                $value = $alipay_icon . '<span class="commerce-alipay-label">' . $alipay_label . '</span>';

                // Add module's CSS for the custom labels styles.
                $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_alipay') . '/theme/commerce_alipay.theme.css';

                break;
            }
        }
    }
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_alipay_global_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['alipay_information'] = array(
        '#markup' => '<span class="commerce-alipay-info">' . t('(Continue with checkout to complete payment via Alipay.)') . '</span>',
    );

    return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
function commerce_alipay_global_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabled action's settings haven't been configured.
    if (empty($payment_method['settings']['partner'])) {
        drupal_set_message(t('Alipay is not configured for use. No Partner ID has been specified.'), 'error');
        // @TODO Minor: this case keeps redirecting to the same page with error.
        // Maybe the redirection should be interrupted.
        return array();
    }
    $form = array();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();

    // Override transaction amount if debug mode is enabled.
    $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();
    $amount = commerce_currency_amount_to_decimal($amount, $currency_code);

    // Set feedback URLs.
    $settings = array(
        // Return to the payment redirect page for processing successful payments.
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        'notify' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    );
    $settings = $payment_method['settings'] + $settings;

    $target_currency_code =  $settings['currency'];

    // Declare the data to be provided through Alipay's API to process payment.
    $data = array(
        'service' => $settings['service'],
        'payment_type' => '1',
        'partner' => $settings['partner'],
        'return_url' => $settings['return'],
        'notify_url' => $settings['notify'],
        '_input_charset' => 'UTF-8',
        'show_url' => $settings['return'],
        'out_trade_no' => $order->order_number,
        'subject' => t('order !order_id', array('!order_id' => $order->order_number)),
        //'body' => commerce_alipay_global_data_body($order),
        'body' => t('order !order_id', array('!order_id' => $order->order_number)),
        'total_fee' =>round(commerce_multicurrency_conversion($amount,$currency_code, $target_currency_code),2),
        'currency' => $target_currency_code,
        'sign_type' => 'MD5',
    );
    // Encrypted transaction signature.
    $data['sign'] = commerce_alipay_global_sign($settings['key'], $data);
    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $value = trim($value);
            // Add the value as a hidden form element.
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }
    // Override submit callback to redirect to Alipay's payment page.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with payment'),
        '#submit' => array('commerce_alipay_global_redirect'),
    );
    return $form;
}

/**
 * Redirects the transaction to Alipay's payment gateway.
 */
function commerce_alipay_global_redirect($form, &$form_state) {
    // URL for directing incoming payment transaction requests.
    $url = 'https://mapi.alipay.com/gateway.do?';
    form_state_values_clean($form_state);
    $data = drupal_http_build_query($form_state['values']);
    $form_state['redirect'] = $url . $data;
}

/**
 * Menu callback function to process Alipay's feedback notifications.
 */
function commerce_alipay_global_process_notify() {
    if (empty($_POST)) {
        return FALSE;
    }
    $order = commerce_order_load($_POST['out_trade_no']);
    $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
    // Validate the received notification from Alipay.
    if (commerce_alipay_global_notify_validate($order, $payment_method, $_POST)) {
        commerce_alipay_global_notify_submit($order, $payment_method, $_POST);
    }
}

/**
 * Validation of Alipay's notifications.
 */
function commerce_alipay_global_notify_validate($order, $payment_method, $notify) {
    if (empty($notify)) {
        return FALSE;
    }
    // Log an entry of the notification received for a transaction.
    watchdog('commerce_alipay_global', 'Customer returned from Alipay with the following data:<pre>@notify</pre>', array('@notify' => print_r($notify, TRUE)));
    $notify = drupal_get_query_parameters($notify);
    // Encrypted transaction signature.
    $sign = commerce_alipay_global_sign($payment_method['settings']['key'], $notify);
    // Verification is done by querying the following Alipay API URL.
    $verify_url = extension_loaded('openssl') ? 'https://mapi.alipay.com/gateway.do?service=notify_verify&' : 'http://notify.alipay.com/trade/notify_query.do?';
    $result = drupal_http_request($verify_url . 'partner=' . $payment_method['settings']['partner'] . '&notify_id=' . $notify["notify_id"]);
    if ($result->data == 'true' && $sign == $notify['sign']) {
        return TRUE;
    }
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
}

/**
 * Submit and process a notification feedback from Alipay for a transaction.
 *
 * This function creates or updates payment transaction records for
 * corresponding orders depending on the status of the notifications received.
 */
function commerce_alipay_global_notify_submit($order, $payment_method, $notify) {
    // Attempt to load prior authorization capture IPN created previously.
    $transactions = commerce_payment_transaction_load_multiple(array(), array('remote_id' => $notify["trade_no"]));
    if (!empty($transactions)) {
        // @TODO: Load the prior transaction ID and update with the capture values.
        // There is probably some special handling necessary in this case.
        $transaction = reset($transactions);
    }
    else {
        // Create a new payment transaction for the order.
        $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
        $transaction->instance_id = $payment_method['instance_id'];
    }
    $currency_code =  $notify["currency"];

    $transaction->amount = commerce_currency_decimal_to_amount($notify['total_fee'], $currency_code);
    $transaction->currency_code = $currency_code;

    $transaction->remote_id = $notify["trade_no"];
    // Set the transaction's statuses based on notify's trade_status.
    $transaction->remote_status = $notify['trade_status'];
    $transaction->data['notify'] = $notify;

    // Handle refund types of cases.
    if (isset($notify['refund_status'])) {
        switch ($notify['refund_status']) {
            // Pending seller accept refund request.
            case 'WAIT_SELLER_AGREE':
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->message = commerce_alipay_global_status_message($notify['refund_status']);
                commerce_order_status_update($order, 'wait_seller_agree');
                break;

            // Success refund transaction.
            case 'REFUND_SUCCESS':
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->message = commerce_alipay_global_status_message($notify['refund_status']);
                commerce_order_status_update($order, 'refund_success');
                break;
        }
    }
    else {
        // Handle trade types of cases.
        switch ($notify['trade_status']) {
            // Operation canceled.
            case 'TRADE_CLOSED':
                $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                commerce_order_status_update($order, 'canceled');
                break;

            // Pending seller to send goods.
            case 'WAIT_SELLER_SEND_GOODS':
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                commerce_order_status_update($order, 'wait_send_goods');
                break;

            // Pending buyer to confirm goods received.
            case 'WAIT_BUYER_CONFIRM_GOODS':
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                commerce_order_status_update($order, 'wait_buyer_confirm');
                break;

            // Pending buyer to process payment.
            case 'WAIT_BUYER_PAY':
                $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                commerce_order_status_update($order, 'wait_buyer_pay');
                break;

            // Transaction complete.
            case 'TRADE_FINISHED':
                $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                break;

            // Transaction successful.
            case 'TRADE_SUCCESS':
                $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
                $transaction->message = commerce_alipay_global_status_message($notify['trade_status']);
                break;
        }
    }
    // Save the payment transaction and redirect to next page.
    commerce_payment_redirect_pane_next_page($order);
    commerce_payment_transaction_save($transaction);

    //if first if not paid in full trigger is not trigger uncomment this
    //rules_invoke_all('commerce_payment_order_paid_in_full', $order, $transaction);

    // Record an entry of the transaction with the order and trade numbers.
    watchdog('commerce_alipay_global', 'Notify processed for Order @order_number with ID @trade_no.', array('@trade_no' => $notify["trade_no"], '@order_number' => $order->order_number), WATCHDOG_INFO);

    echo "success";
}

/**
 * Callback for body description.
 *
 * This callback allows setting a more complete description of the order on
 * Alipay's payment details page.
 */
function commerce_alipay_global_data_body($order) {
    if (empty($order)) {
        return '';
    }
    else {
        // Get a list of the items from the order to be paid.
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $line_items = $order_wrapper->commerce_line_items->value();
        foreach ($line_items as $line_item) {
            if ($line_item->type == 'product' && !empty($line_item->commerce_product)) {
                $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
                $body[] = $line_item_wrapper->commerce_product->title->value();
            }
        }
        $body = implode($body, ' | ');

        if(strlen( $body) >= 100){//make sure body length does not over alipay boby length limit
            $body = substr($body,0,100) . '...';
        }

        return $body;
    }
}

/**
 * Helper function to provide an encrypted signature to be passed to Alipay.
 */
function commerce_alipay_global_sign($key, $para = array(), $sign_type = 'MD5') {
    ksort($para);
    reset($para);
    foreach ($para as $k => $val) {
        if (!in_array($k, array('sign', 'sign_type')) && !empty($val)) {
            $para_filter[] = $k . '=' . $val;
        }
    }
    $arg = implode('&', $para_filter);
    if (get_magic_quotes_gpc()) {
        $arg = stripslashes($arg);
    }
    return md5($arg . $key);
}

/**
 * Returns an appropriate message for a given status.
 */
function commerce_alipay_global_status_message($status) {
    switch ($status) {
        // Messages used for refund types of cases.
        case 'WAIT_SELLER_AGREE':
            return t('The refund request is waiting for seller to agree.');

        case 'REFUND_SUCCESS':
            return t('Seller agrees on the refund request.');

        // Messages used for trade types of cases.
        case 'TRADE_CLOSED':
            return t('The payment has failed. This happens only if the payment was made from your customer’s bank account.');

        case 'WAIT_SELLER_SEND_GOODS':
            return t('The payment is waiting for the seller to send goods.');

        case 'WAIT_BUYER_CONFIRM_GOODS':
            return t('Seller has already sent the goods, pending buyer to confirm.');

        case 'WAIT_BUYER_PAY':
            return t('The payment is waiting for the buyer to pay.');

        case 'TRADE_FINISHED':
            return t('The payment has completed.');

        case 'TRADE_SUCCESS':
            return t('The payment has completed.');
    }
}