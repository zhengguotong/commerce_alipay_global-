<?php
/**
* @file
 * @author Guotong Zheng (Tony)
 * @website http://zhengguotong.me
* Implements Alipay global payment services for use with Drupal Commerce
*/

/**
 * Implements hook_menu().
 */
function commerce_alipay_global_menu() {
    // Add a menu callback for Alipay's notification on operation processing.
    $items['commerce_alipay_global/notify'] = array(
        'page callback' => 'commerce_alipay_process_notify',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_alipay_global_commerce_payment_method_info() {
    $payment_methods = array();

    // Declare Alipay payment method to redirect to external site.
    $payment_methods['alipay_global'] = array(
        'base' => 'commerce_alipay_global',
        'title' => t('Alipay Global'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE,
    );

    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_alipay_global_settings_form($settings = NULL) {
    $form = array();

    $settings = (array) $settings + array(
            'service' => 'create_forex_trade',
            'seller_email' => '',
            'partner' => '',
            'key' => '',
            'debug' => '',
        );
    // Declare form settings to configure the Alipay payment method.
    $form['service'] = array(
        '#type' => 'select',
        '#title' => t('Payment service type'),
        '#prefix' => t("Configure Alipay payment settings below with the corresponding account information.<br/>If you do not already have an account feel free to create a new merchant account at <a href='@link_alipayreg'>Alipay's Enterprise account registration</a> page.<br/>More help could be found on the official website at: <a href='@link_alipayhelp'>How to create a new enterprise account on Alipay's website</a> <em>(Chinese version)</em>.", array('@link_alipayreg' => 'https://memberprod.alipay.com/account/reg/enterpriseIndex.htm', '@link_alipayhelp' => 'http://help.alipay.com/lab/help_detail.htm?help_id=211702')),
        '#description' => t('Select the type of service provided by Alipay to process payments.<br/><strong>Currently only Instant Payment is fully supported.</strong>'),
        '#default_value' => $settings['service'],
        '#options' => array(
            'create_forex_trade' => t('Globlal')
        ),
        '#required' => TRUE,
    );
    // Seller email should be an email address format.
    $form['seller_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Seller email'),
        '#description' => t('The seller email with which the Alipay account was registered for the corresponding type of service.'),
        '#default_value' => $settings['seller_email'],
        '#required' => TRUE,
    );
    // Partner ID should be long string.
    $form['partner'] = array(
        '#type' => 'textfield',
        '#title' => t('Partner ID'),
        '#description' => t("The Partner ID of the Alipay account on which payments should be credited."),
        '#default_value' => $settings['partner'],
        '#required' => TRUE,
    );
    // Alipay Key should be long string.
    $form['key'] = array(
        '#type' => 'textfield',
        '#title' => t('Key'),
        '#description' => t("The Key code provided by Alipay's API for the corresponding account and type of service."),
        '#default_value' => $settings['key'],
        '#required' => TRUE,
    );
    // Enable debug mode.
    $form['debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug mode <strong>(for development use only)</strong>'),
        '#description' => t('<strong>Override all transactions to a total of 0.01 CNY</strong> for testing the configuration and making sure that payments can be received on the correct account.<br/>This setting should only be used for development purposes.'),
        '#default_value' => $settings['debug'],
    );

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Modify the payment method selection pane on Checkout to add Alipay icons.
 */
function commerce_alipay_global_form_commerce_checkout_form_alter(&$form, &$form_state)
{
    // If this checkout form contains the payment method radios...
    if (!empty($form['commerce_payment']['payment_method']['#options'])) {
        // Loop over its options array looking for a Alipay option.
        foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
            list($method_id, $rule_name) = explode('|', $key);

            // If we find Alipay...
            if ($method_id == 'alipay_global') {
                // Prepare the replacement radio button text with icons.
                $icons_path = drupal_get_path('module', 'commerce_alipay_global') . '/images/';

                // Generate Alipay logo image markup.
                $alipay_label = t('Alipay');
                $alipay_icon = theme('image', array(
                    'path' => $icons_path . 'alipay.jpg',
                    'title' => $alipay_label,
                    'alt' => $alipay_label,
                    'attributes' => array('class' => 'commerce-alipay-icon'),
                ));

                // Generate the aggregated markup.
                $value = $alipay_icon . '<span class="commerce-alipay-label">' . $alipay_label . '</span>';
//                $value .= '<div class="commerce-alipay-directpay">' . $directpay_icon . '<span class="commerce-alipay-label">' . $directpay_label . '</span></div>';

                // Add module's CSS for the custom labels styles.
                $form['commerce_payment']['payment_method']['#attached']['css'][] = drupal_get_path('module', 'commerce_alipay') . '/theme/commerce_alipay.theme.css';

                break;
            }
        }
    }
}

/**
 * Payment method callback: adds a message to the submission form.
 */
function commerce_alipay_global_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
    $form['alipay_information'] = array(
        '#markup' => '<span class="commerce-alipay-info">' . t('(Continue with checkout to complete payment via Alipay.)') . '</span>',
    );

    return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * Prepares the necessary data to be passed to Alipay with the redirection.
 */
function commerce_alipay_global_redirect_form($form, &$form_state, $order, $payment_method) {
    // Return an error if the enabled action's settings haven't been configured.
    if (empty($payment_method['settings']['partner'])) {
        drupal_set_message(t('Alipay is not configured for use. No Partner ID has been specified.'), 'error');
        // @TODO Minor: this case keeps redirecting to the same page with error.
        // Maybe the redirection should be interrupted.
        return array();
    }
    $form = array();
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    // Override transaction amount if debug mode is enabled.
    $amount = $payment_method['settings']['debug'] ? 1 : $wrapper->commerce_order_total->amount->value();

    // Set feedback URLs.
    $settings = array(
        // Return to the payment redirect page for processing successful payments.
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
        'notify' => url('commerce_alipay_global/notify', array('absolute' => TRUE)),
    );
    $settings = $payment_method['settings'] + $settings;

    // Declare the data to be provided through Alipay's API to process payment.
    $data = array(
        'service' => $settings['service'],
        'payment_type' => '1',
        'partner' => $settings['partner'],
        'seller_email' => $settings['seller_email'],
        'return_url' => $settings['return'],
        'notify_url' => $settings['notify'],
        '_input_charset' => 'UTF-8',
        'show_url' => $settings['return'],
        'out_trade_no' => $order->order_number,
        'subject' => t('order !order_id', array('!order_id' => $order->order_number)),
        'body' => commerce_alipay_global_data_body($order),
        'total_fee' => commerce_currency_amount_to_decimal($amount, 'CNY'),
        'currency' => 'AUD',
        'sign_type' => 'MD5',
    );
    // Encrypted transaction signature.
    $data['sign'] = commerce_alipay_global_sign($settings['key'], $data);
    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $value = trim($value);
            // Add the value as a hidden form element.
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }
    // Override submit callback to redirect to Alipay's payment page.
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with payment'),
        '#submit' => array('commerce_alipay_global_redirect'),
    );
    return $form;
}

/**
 * Redirects the transaction to Alipay's payment gateway.
 */
function commerce_alipay_global_redirect($form, &$form_state) {
    // URL for directing incoming payment transaction requests.
    $url = 'https://mapi.alipay.com/gateway.do?';
    form_state_values_clean($form_state);
    $data = drupal_http_build_query($form_state['values']);
    $form_state['redirect'] = $url . $data;
}

/**
 * Callback for body description.
 *
 * This callback allows setting a more complete description of the order on
 * Alipay's payment details page.
 */
function commerce_alipay_global_data_body($order) {
    if (empty($order)) {
        return '';
    }
    else {
        // Get a list of the items from the order to be paid.
        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $line_items = $order_wrapper->commerce_line_items->value();
        foreach ($line_items as $line_item) {
            if ($line_item->type == 'product' && !empty($line_item->commerce_product)) {
                $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
                $body[] = $line_item_wrapper->commerce_product->title->value();
            }
        }
        return implode($body, ' | ');
    }
}

/**
 * Helper function to provide an encrypted signature to be passed to Alipay.
 */
function commerce_alipay_global_sign($key, $para = array(), $sign_type = 'MD5') {
    ksort($para);
    reset($para);
    foreach ($para as $k => $val) {
        if (!in_array($k, array('sign', 'sign_type')) && !empty($val)) {
            $para_filter[] = $k . '=' . $val;
        }
    }
    $arg = implode('&', $para_filter);
    if (get_magic_quotes_gpc()) {
        $arg = stripslashes($arg);
    }
    return md5($arg . $key);
}


